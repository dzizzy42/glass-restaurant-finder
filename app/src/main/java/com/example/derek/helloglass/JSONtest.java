package com.example.derek.helloglass;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.StrictMode;
import android.view.View;
import android.widget.Toast;

import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import org.json.*;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;

/**
 * Created by Derek on 4/10/2015.
 */
public class JSONtest extends Activity implements LocationListener{
    /** {@link com.google.android.glass.widget.CardScrollView} to use as the main content view. */
    private CardScrollView mCardScroller;
    private CardScrollAdapter mAdapter;
    private double latitude, longitude;
    private LocationManager lm;
    private Location loc;
    private String provider;

    // /* "Hello World!" {@link View} generated by {@link #buildView()}. */
    private View mView;


    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        ArrayList<CardBuilder> cards = new ArrayList<CardBuilder>();
        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);

        lm = (LocationManager)this.getSystemService(Context.LOCATION_SERVICE);
        Criteria c = new Criteria();
        provider = lm.getBestProvider(c, false);
        loc = lm.getLastKnownLocation(provider);

        if (provider != null && !provider.equals("")) {
            Location location = lm.getLastKnownLocation(provider);
            lm.requestLocationUpdates(provider, 2000, 1, this);
            if (location != null) {
                onLocationChanged(location);
            } else {
                Toast.makeText(getApplicationContext(), "location not found", Toast.LENGTH_LONG).show();
            }
        } else {
            Toast.makeText(getApplicationContext(), "Provider is null", Toast.LENGTH_LONG).show();
        }


        try {
            // http://labs.puneeth.org:5000/techlab/getrestaurants?latitude=39.011870&longitude=-77.527546

            longitude = loc.getLongitude();
            latitude = loc.getLatitude();
            String ur = "http://labs.puneeth.org:5000/techlab/getrestaurants?latitude="+latitude+"&longitude="+longitude;
            URL url = new URL(ur);

            InputStream is = url.openStream();  // throws an IOException

            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            String str = "", line = "";
            line = br.readLine();

            while (line != null)
            {
                str += line;
                line = br.readLine();
            }


            JSONArray arr = new JSONArray(str);

            for (int i = 0; i < arr.length(); i++) {
                JSONObject curr = arr.getJSONObject(i);
                String s = curr.getString("name") + '\n';
                s += (curr.getString("is_closed") == "false") ? "is OPEN\n":"is CLOSED\n";
                s += curr.getString("distance") + "UNITS from your location\n";
                s += curr.getString("rating") + " star rating";



                cards.add(new CardBuilder(this, CardBuilder.Layout.TEXT)
                            .setText( s )
                            .addImage( resize(LoadImageFromWebOperations(curr.getString("rating_img_url"))) )
                );
            }

        }
        catch(Exception e)
        {
            e.printStackTrace();
            cards.add(new CardBuilder(this, CardBuilder.Layout.TEXT).setText( "EXCEPTION CAUGHT" ));
        }
        mAdapter = new CardAdapter( cards );
        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(mAdapter);
        setContentView(mCardScroller);
    }
    public static Drawable LoadImageFromWebOperations(String url) {
        try {
            InputStream is = (InputStream) new URL(url).getContent();
            Drawable d = Drawable.createFromStream(is, "src name");
            return d;
        } catch (Exception e) {
            return null;
        }
    }
    private Drawable resize(Drawable image) {
        Bitmap b = ((BitmapDrawable)image).getBitmap();
        Bitmap bitmapResized = Bitmap.createScaledBitmap(b, 100, 50, false);
        return new BitmapDrawable(getResources(), bitmapResized);
    }

    @Override
    public void onLocationChanged(Location loc) {
        latitude = loc.getLatitude();
        longitude = loc.getLongitude();
    }
    @Override
    public void onStatusChanged(String s, int i, Bundle bundle) {
    }
    @Override
    public void onProviderEnabled(String s) {
    }
    @Override
    public void onProviderDisabled(String s) {
    }
    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.

     private View buildView() {
     CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);

     card.setText(R.string.hello_world);
     return card.getView();
     }
     */
}
